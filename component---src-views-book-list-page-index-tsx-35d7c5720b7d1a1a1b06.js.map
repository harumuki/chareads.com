{"version":3,"sources":["webpack:///./src/utils/hooks/useScrollPosition.ts","webpack:///./src/components/InfiniteScroll/index.tsx","webpack:///./src/views/BookListPage/index.tsx"],"names":["useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","isBrowser","useScrollPosition","effect","wait","deps","element","throttleTimeout","callback","current","document","body","getBoundingClientRect","bottom","innerHeight","getScrollPosition","handleScroll","setTimeout","addEventListener","removeEventListener","InfiniteScroll","items","renderItem","anchorRef","createRef","useState","itemsToShow","setItemsToShow","pos","length","slice","map","ref","StyledBook","styled","GridItem","big","screenMin","m","FONT","SIZE","S","query","BookListPage","bookData","data","location","books","normalizeArray","navOpenOnDesktop","navTitle","as","full","book","rating7","key","id","span","spanFromM","spanFromL","spanRowsFromM","featured"],"mappings":"oHAEMA,EACc,oBAAXC,OAAyBC,kBAAkBC,YAC9CC,EAAY,oBAAOH,OA6CVI,EAlCW,SACxBC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAkB,KAEhBC,EAAW,WACfL,EAlBsB,SACxBG,GAEA,OAAKL,GAEUK,EAAQG,SAAWC,SAASC,MAC7BC,wBAAwBC,OAASf,OAAOgB,YAH/B,EAedC,CAAkBT,IACzBC,EAAkB,MAGpBV,GAA0B,WACxB,GAAKI,EAAL,CAIA,IAAMe,EAAe,WACfZ,EACsB,OAApBG,IACFA,EAAkBU,WAAWT,EAAUJ,IAGzCI,KAMJ,OAFAV,OAAOoB,iBAAiB,SAAUF,GAE3B,kBAAYlB,OAAOqB,oBAAoB,SAAUH,OACvDX,GAAQ,KCtCPJ,EAAY,oBAAOH,OA6BVsB,IAtByB,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC1CC,EAAYC,sBAD+C,EAE3BC,mBAZlB,IAYbC,EAF0D,KAE7CC,EAF6C,KAcjE,OAVAzB,GACE,SAAC0B,GACKA,EAAM,KAAOF,EAAcL,EAAMQ,QACnCF,EAAeD,EAhBL,KAFI,IAqBlB,CAACA,GACDH,GAIA,oCACGF,EAAMS,MAAM,EAAG7B,EAAYyB,EAAcL,EAAMQ,QAAQE,IAAIT,GAC5D,0BAAMU,IAAKT,O,yaCbjB,IAAMU,EAAaC,YAAOC,IAAPD,CAAH,KACZ,gBAAGE,EAAH,EAAGA,IAAH,OAAkCC,IAAUC,EAA3C,IACYF,EAAM,SAAWG,IAAKC,KAAKC,MA4C/BC,EAAQ,aAeNC,UA7CuB,SAAC,GAAqC,IAA3BC,EAA2B,EAAnCC,KAAQD,SAAYE,EAAe,EAAfA,SACrDC,EAAQC,YAAeJ,GAE7B,OACE,kBAAC,IAAD,CAAQE,SAAUA,EAAUG,kBAAgB,EAACC,SAAS,gBACpD,kBAAC,IAAD,CAAMC,GAAG,KAAKC,MAAI,GAChB,kBAAC,IAAD,CACE/B,MAAO0B,EACPzB,WAAY,SAAC+B,GACX,IAAMjB,EAAMiB,EAAKC,SAAW,EAC5B,OACE,kBAACrB,EAAD,CACEG,IAAKA,EACLe,GAAG,KACHI,IAAKF,EAAKG,GACVC,KAAM,EACNC,UAAWtB,EAAM,EAAI,EACrBuB,UAAWvB,EAAM,EAAI,EACrBwB,cAAexB,EAAM,EAAI,GAEzB,kBAAC,IAAD,CAAUiB,KAAMA,EAAMQ,SAAUzB,EAAKA,IAAKA","file":"component---src-views-book-list-page-index-tsx-35d7c5720b7d1a1a1b06.js","sourcesContent":["import { useEffect, useLayoutEffect } from 'react'\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect\nconst isBrowser = typeof window !== `undefined`\n\nconst getScrollPosition = (\n  element: React.RefObject<React.ReactNode>\n): number => {\n  if (!isBrowser) return 0\n\n  const target = element.current || document.body\n  return target.getBoundingClientRect().bottom - window.innerHeight\n}\n\nconst useScrollPosition = (\n  effect: (pos: number) => void,\n  wait: number,\n  deps: any[], // eslint-disable-line\n  element?: React.RefObject<React.ReactNode>\n): void => {\n  let throttleTimeout = null\n\n  const callback = (): void => {\n    effect(getScrollPosition(element))\n    throttleTimeout = null\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    if (!isBrowser) {\n      return\n    }\n\n    const handleScroll = (): void => {\n      if (wait) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(callback, wait)\n        }\n      } else {\n        callback()\n      }\n    }\n\n    window.addEventListener('scroll', handleScroll)\n\n    return (): void => window.removeEventListener('scroll', handleScroll)\n  }, deps || [])\n}\n\nexport default useScrollPosition\n","import React, { useState, createRef } from 'react'\n\nimport useScrollPosition from 'utils/hooks/useScrollPosition'\n\nconst SCROLL_BUFFER = 300\nconst INITIAL_COUNT = 24\nconst INCREMENT = 8\n\nconst isBrowser = typeof window !== `undefined`\n\ninterface Props {\n  items: object[]\n  renderItem: (item: object) => React.ReactNode\n}\n\nconst InfiniteScroll: React.FC<Props> = ({ items, renderItem }) => {\n  const anchorRef = createRef()\n  const [itemsToShow, setItemsToShow] = useState(INITIAL_COUNT)\n\n  useScrollPosition(\n    (pos) => {\n      if (pos < 400 && itemsToShow < items.length)\n        setItemsToShow(itemsToShow + INCREMENT)\n    },\n    SCROLL_BUFFER,\n    [itemsToShow],\n    anchorRef\n  )\n\n  return (\n    <>\n      {items.slice(0, isBrowser ? itemsToShow : items.length).map(renderItem)}\n      <span ref={anchorRef as React.LegacyRef<HTMLSpanElement>} />\n    </>\n  )\n}\n\nexport default InfiniteScroll\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport styled, { SimpleInterpolation } from 'styled-components'\n\nimport { PageProps } from 'types/page'\nimport { normalizeArray } from 'utils/graphql/normalize'\nimport Layout from 'Layout'\nimport { BookCardType } from 'types/book'\nimport { FONT } from 'styles/tokens'\nimport { screenMin } from 'styles/responsive'\nimport BookCard from 'components/cards/BookCard'\nimport Grid from 'components/Grid'\nimport GridItem from 'components/Grid/GridItem'\nimport InfiniteScroll from 'components/InfiniteScroll'\n\ninterface BookProps {\n  big: boolean\n}\n\nconst StyledBook = styled(GridItem)<BookProps>`\n  ${({ big }): SimpleInterpolation => screenMin.m`\n    font-size: ${big ? '1.25em' : FONT.SIZE.S};\n  `}\n`\n\ninterface Props extends PageProps {\n  data: {\n    bookData: {\n      edges: {\n        node: BookCardType\n      }[]\n    }\n  }\n}\n\nconst BookListPage: React.FC<Props> = ({ data: { bookData }, location }) => {\n  const books = normalizeArray(bookData) as BookCardType[]\n\n  return (\n    <Layout location={location} navOpenOnDesktop navTitle=\"Book reviews\">\n      <Grid as=\"ol\" full>\n        <InfiniteScroll\n          items={books}\n          renderItem={(book: BookCardType): React.ReactNode => {\n            const big = book.rating7 >= 6\n            return (\n              <StyledBook\n                big={big}\n                as=\"li\"\n                key={book.id}\n                span={1}\n                spanFromM={big ? 6 : 3}\n                spanFromL={big ? 4 : 2}\n                spanRowsFromM={big ? 2 : 1}\n              >\n                <BookCard book={book} featured={big} big={big} />\n              </StyledBook>\n            )\n          }}\n        />\n      </Grid>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query BookListPage {\n    bookData: allBook(\n      sort: { fields: dateRated, order: DESC }\n      filter: { rating7: { ne: null } }\n    ) {\n      edges {\n        node {\n          ...BookCardFields\n        }\n      }\n    }\n  }\n`\n\nexport default BookListPage\n"],"sourceRoot":""}