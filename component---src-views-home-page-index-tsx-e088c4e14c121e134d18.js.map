{"version":3,"sources":["webpack:///./src/routes/index.ts","webpack:///./src/routes/paths.ts","webpack:///./src/views/HomePage/LinkCard.tsx","webpack:///./src/views/HomePage/index.tsx"],"names":["PAGES","404","PATH","VIEW","HOME","VIDEO","VIDEOS","BOOK","BOOKS","PATHS","Object","entries","forEach","PAGE","StyledLinkCard","styled","Link","COLOR","BACKGROUND_LIGHT","BORDER_RADIUS","S","FONT","FAMILY","DECORATIVE","LinkCard","to","children","StyledBookGrid","Grid","screen","m","query","HomePage","bookData","data","location","books","normalizeArray","Layout","TextIntro","H","as","size","decorative","Wrapper","length","map","book","GridItem","key","id","span","spanFromM","spanFromL","BookCard","big","rating7"],"mappings":"+JAkCeA,G,wCA3BU,CACvBC,IAAK,CACHC,KAAM,OACNC,KAAM,gBAERC,KAAM,CACJF,KAAM,IACNC,KAAM,YAERE,MAAO,CACLH,KAAM,SACNC,KAAM,aAERG,OAAQ,CACNJ,KAAM,UACNC,KAAM,iBAERI,KAAM,CACJL,KAAM,QACNC,KAAM,YAERK,MAAO,CACLN,KAAM,SACNC,KAAM,kBCxBJM,EAAmB,GAEzBC,OAAOC,QAAQX,GAAOY,SAAQ,YAAsB,IAApBC,EAAoB,KAAZX,EAAY,KAAZA,KACtCO,EAAMI,GAAQX,KAGDO,Q,8bCNf,IAAMK,EAAiBC,YAAOC,IAAPD,CAAH,IAOJE,IAAMC,iBACHC,IAAcC,EAChBC,IAAKC,OAAOC,YAoBdC,EAVmB,SAAC,GAAqB,IAAnBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SACvC,OACE,kBAACZ,EAAD,CAAgBW,GAAIA,GACjBC,EACD,6BAFF,M,kRCRJ,IAAMC,EAAiBZ,YAAOa,IAAPb,CAAH,IAChBc,IAAOC,EADS,MA+DPC,EAAQ,YAgBNC,UA7DmB,SAAC,GAAqC,IAA3BC,EAA2B,EAAnCC,KAAQD,SAAYE,EAAe,EAAfA,SACjDC,EAAQC,YAAeJ,GAE7B,OACE,kBAACK,EAAA,EAAD,CAAQH,SAAUA,GAChB,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAGC,GAAG,KAAKC,KAAK,MAAMC,YAAU,GAC9B,kBAAC,IAAD,CAAMlB,GAAIhB,EAAML,MAAhB,aAEF,0MAOF,kBAACwC,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAD,CAAGC,GAAG,KAAKC,KAAK,IAAIC,YAAU,GAC5B,kBAAC,IAAD,CAAMlB,GAAIhB,EAAMD,OAAhB,kBAGJ,kBAACmB,EAAD,CAAgBc,GAAG,MAChBL,EAAMS,QACLT,EAAMU,KAAI,SAACC,GAAD,OACR,kBAACC,EAAA,EAAD,CACEP,GAAG,KACHQ,IAAKF,EAAKG,GACVC,KAAM,EACNC,UAAW,EACXC,UAAW,GAEX,kBAACC,EAAA,EAAD,CAAUP,KAAMA,EAAMQ,IAAKR,EAAKS,SAAW,QAGjD,kBAACR,EAAA,EAAD,CAAUP,GAAG,KAAKU,KAAM,EAAGC,UAAW,EAAGC,UAAW,GAClD,kBAAC,EAAD,CAAU5B,GAAIhB,EAAMD,OAApB,sBAEF,kBAACwC,EAAA,EAAD,CAAUP,GAAG,KAAKU,KAAM,EAAGC,UAAW,EAAGC,UAAW,GAClD,kBAAC,EAAD,CAAU5B,GAAIhB,EAAMH,QAApB","file":"component---src-views-home-page-index-tsx-e088c4e14c121e134d18.js","sourcesContent":["type PagesType = {\n  [key: string]: {\n    PATH: string\n    VIEW: string\n  }\n}\n\nconst PAGES: PagesType = {\n  404: {\n    PATH: '/404',\n    VIEW: 'NotFoundPage',\n  },\n  HOME: {\n    PATH: '/',\n    VIEW: 'HomePage',\n  },\n  VIDEO: {\n    PATH: '/video',\n    VIEW: 'VideoPage',\n  },\n  VIDEOS: {\n    PATH: '/videos',\n    VIEW: 'VideoListPage',\n  },\n  BOOK: {\n    PATH: '/book',\n    VIEW: 'BookPage',\n  },\n  BOOKS: {\n    PATH: '/books',\n    VIEW: 'BookListPage',\n  },\n}\n\nexport default PAGES\n","import PAGES from '.'\n\ntype PathsType = {\n  [key: string]: string\n}\n\nconst PATHS: PathsType = {}\n\nObject.entries(PAGES).forEach(([PAGE, { PATH }]) => {\n  PATHS[PAGE] = PATH\n})\n\nexport default PATHS\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\n\nimport { FONT, COLOR, BORDER_RADIUS } from 'styles/tokens'\n\nconst StyledLinkCard = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0;\n  padding: 1rem;\n  height: 100%;\n  background: ${COLOR.BACKGROUND_LIGHT};\n  border-radius: ${BORDER_RADIUS.S};\n  font-family: ${FONT.FAMILY.DECORATIVE};\n  font-size: 2.5em;\n  line-height: 0.85;\n`\n\ninterface Props {\n  to: string\n  children: React.ReactNode\n}\n\nconst LinkCard: React.FC<Props> = ({ to, children }) => {\n  return (\n    <StyledLinkCard to={to}>\n      {children}\n      <br />\n      &rarr;\n    </StyledLinkCard>\n  )\n}\n\nexport default LinkCard\n","import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport styled from 'styled-components'\n\nimport { PageProps } from 'types/page'\nimport { normalizeArray } from 'utils/graphql/normalize'\nimport PATHS from 'routes/paths'\nimport Layout from 'Layout'\nimport { RawBookCard, BookCardType } from 'types/book/card'\nimport H from 'components/H'\nimport Wrapper from 'components/Wrapper'\nimport TextIntro from 'components/Wrapper/TextIntro'\nimport Grid from 'components/Grid'\nimport GridItem from 'components/Grid/GridItem'\nimport BookCard from 'components/cards/BookCard'\nimport { screen } from 'styles/responsive'\n\nimport LinkCard from './LinkCard'\n\nconst StyledBookGrid = styled(Grid)`\n  ${screen.m`\n    > *:nth-child(14) {\n      display: none;\n    }\n  `}\n`\n\ninterface Props extends PageProps {\n  data: {\n    bookData: {\n      edges: {\n        node: RawBookCard\n      }[]\n    }\n  }\n}\n\nconst HomePage: React.FC<Props> = ({ data: { bookData }, location }) => {\n  const books = normalizeArray(bookData) as BookCardType[]\n\n  return (\n    <Layout location={location}>\n      <TextIntro>\n        <H as=\"h1\" size=\"XXL\" decorative>\n          <Link to={PATHS.HOME}>Chareads</Link>\n        </H>\n        <p>\n          Hello, I&rsquo;m Charlotte and I love to read anything and everything.\n          Chareads is where I record and review every book I read. Have a poke\n          around and find your next favourite.\n        </p>\n      </TextIntro>\n\n      <Wrapper>\n        <H as=\"h2\" size=\"L\" decorative>\n          <Link to={PATHS.BOOKS}>Recent reads</Link>\n        </H>\n      </Wrapper>\n      <StyledBookGrid as=\"ol\">\n        {books.length &&\n          books.map((book) => (\n            <GridItem\n              as=\"li\"\n              key={book.id}\n              span={1}\n              spanFromM={4}\n              spanFromL={3}\n            >\n              <BookCard book={book} big={book.rating7 >= 6} />\n            </GridItem>\n          ))}\n        <GridItem as=\"li\" span={1} spanFromM={4} spanFromL={3}>\n          <LinkCard to={PATHS.BOOKS}>More book reviews</LinkCard>\n        </GridItem>\n        <GridItem as=\"li\" span={1} spanFromM={4} spanFromL={3}>\n          <LinkCard to={PATHS.VIDEOS}>Videos</LinkCard>\n        </GridItem>\n      </StyledBookGrid>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query HomePage {\n    bookData: allMarkdownRemark(\n      sort: { fields: frontmatter___dateRated, order: DESC }\n      filter: { frontmatter: { rating7: { ne: null } } }\n      limit: 14\n    ) {\n      edges {\n        node {\n          ...BookCardFields\n        }\n      }\n    }\n  }\n`\n\nexport default HomePage\n"],"sourceRoot":""}