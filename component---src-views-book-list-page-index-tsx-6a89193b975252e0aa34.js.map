{"version":3,"sources":["webpack:///./src/components/cards/BookCard/index.tsx","webpack:///./node_modules/core-js/modules/es6.string.big.js","webpack:///./src/views/BookListPage/index.tsx"],"names":["StyledBookCard","styled","Link","COLOR","BACKGROUND_CARD","BORDER_RADIUS","S","StyledImg","Img","background","StyledStarRating","div","BookCard","book","big","to","slug","style","image","colors","lightMuted","color","darkVibrant","vibrant","title","author","key","childImageSharp","fluid","src","muted","of7","rating7","createHTML","this","query","BookListPage","bookData","data","location","books","normalizeArray","as","length","map","id","span","spanFromM","spanFromL","spanRows"],"mappings":"wwBAaA,IAAMA,EAAiBC,YAAOC,IAAPD,CAAH,IAMJE,IAAMC,gBACHC,IAAcC,GAO3BC,EAAYN,YAAOO,IAAPP,CAAH,KACC,qBAAGQ,cAIbC,EAAmBT,IAAOU,IAAV,KAuCPC,IA1BmB,SAAC,GAAkB,IAAhBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IACzC,OACE,kBAACd,EAAD,CACEe,GAAIF,EAAKG,KACTF,IAAKA,EACLG,MACE,CACER,WAAYK,GAAOD,EAAKK,MAAMC,OAAOC,WACrCC,MAAOR,EAAKK,MAAMC,OAAOG,YACzB,kBAAmBT,EAAKK,MAAMC,OAAOI,SAGzCC,MAAUX,EAAKW,MAAV,OAAsBX,EAAKY,QAEhC,kBAAClB,EAAD,CACEmB,IAAKb,EAAKK,MAAMS,gBAAgBC,MAAMC,IACtCD,MAAOf,EAAKK,MAAMS,gBAAgBC,MAClCnB,WAAYI,EAAKK,MAAMC,OAAOW,QAEhC,kBAACpB,EAAD,KACE,kBAAC,IAAD,CAAYqB,IAAKlB,EAAKmB,c,kCC/D9B,EAAQ,OAAR,CAA0B,OAAO,SAAUC,GACzC,OAAO,WACL,OAAOA,EAAWC,KAAM,MAAO,GAAI,S,kCCJvC,kIAgDaC,EAAQ,aAeNC,UA1CuB,SAAC,GAAqC,IAA3BC,EAA2B,EAAnCC,KAAQD,SAAYE,EAAe,EAAfA,SACrDC,EAAQC,YAAeJ,GAE7B,OACE,kBAAC,IAAD,CAAQE,SAAUA,GAChB,kBAAC,IAAD,CAAMG,GAAG,MACNF,EAAMG,QACLH,EAAMI,KAAI,SAAC/B,GACT,IAAMC,EAAMD,EAAKmB,SAAW,EAC5B,OACE,kBAAC,IAAD,CACEU,GAAG,KACHhB,IAAKb,EAAKgC,GACVC,KAAMhC,EAAM,EAAI,EAChBiC,UAAWjC,EAAM,EAAI,EACrBkC,UAAWlC,EAAM,EAAI,EACrBmC,SAAUnC,EAAM,EAAI,GAEpB,kBAAC,IAAD,CAAUD,KAAMA,EAAMC,IAAKA","file":"component---src-views-book-list-page-index-tsx-6a89193b975252e0aa34.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport { BookCardType } from 'types/book/card'\nimport StarRating from 'components/StarRating'\nimport { COLOR, BORDER_RADIUS } from 'styles/tokens'\n\ninterface BookCardProps {\n  big: boolean\n}\n\nconst StyledBookCard = styled(Link)<BookCardProps>`\n  display: block;\n  margin: 0;\n  height: 100%;\n  padding: 10% 20% calc(10% + 1em);\n  position: relative;\n  background: ${COLOR.BACKGROUND_CARD};\n  border-radius: ${BORDER_RADIUS.S};\n`\n\ninterface StyledImgProps {\n  background: string\n}\n\nconst StyledImg = styled(Img)<StyledImgProps>`\n  background: ${({ background }): string => background};\n  box-shadow: 0 0.2em 0.5em rgba(0, 0, 0, 0.1), 0 0 0.3em rgba(0, 0, 0, 0.05);\n`\n\nconst StyledStarRating = styled.div`\n  position: absolute;\n  left: 0;\n  bottom: 0.5em;\n  width: 100%;\n  text-align: center;\n`\n\ninterface Props {\n  book: BookCardType\n  big?: boolean\n}\n\nconst BookCard: React.FC<Props> = ({ book, big }) => {\n  return (\n    <StyledBookCard\n      to={book.slug}\n      big={big}\n      style={\n        {\n          background: big && book.image.colors.lightMuted,\n          color: book.image.colors.darkVibrant,\n          '--primary-color': book.image.colors.vibrant,\n        } as object\n      }\n      title={`${book.title} by ${book.author}`}\n    >\n      <StyledImg\n        key={book.image.childImageSharp.fluid.src}\n        fluid={book.image.childImageSharp.fluid}\n        background={book.image.colors.muted}\n      />\n      <StyledStarRating>\n        <StarRating of7={book.rating7} />\n      </StyledStarRating>\n    </StyledBookCard>\n  )\n}\n\nexport default BookCard\n","'use strict';\n// B.2.3.3 String.prototype.big()\nrequire('./_string-html')('big', function (createHTML) {\n  return function big() {\n    return createHTML(this, 'big', '', '');\n  };\n});\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport { PageProps } from 'types/page'\nimport { normalizeArray } from 'utils/graphql/normalize'\nimport Layout from 'Layout'\nimport { RawBookCard, BookCardType } from 'types/book/card'\nimport BookCard from 'components/cards/BookCard'\nimport Grid from 'components/Grid'\nimport GridItem from 'components/Grid/GridItem'\n\ninterface Props extends PageProps {\n  data: {\n    bookData: {\n      edges: {\n        node: RawBookCard\n      }[]\n    }\n  }\n}\n\nconst BookListPage: React.FC<Props> = ({ data: { bookData }, location }) => {\n  const books = normalizeArray(bookData) as BookCardType[]\n\n  return (\n    <Layout location={location}>\n      <Grid as=\"ol\">\n        {books.length &&\n          books.map((book) => {\n            const big = book.rating7 >= 6\n            return (\n              <GridItem\n                as=\"li\"\n                key={book.id}\n                span={big ? 2 : 1}\n                spanFromM={big ? 8 : 4}\n                spanFromL={big ? 6 : 3}\n                spanRows={big ? 2 : 1}\n              >\n                <BookCard book={book} big={big} />\n              </GridItem>\n            )\n          })}\n      </Grid>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query BookListPage {\n    bookData: allMarkdownRemark(\n      sort: { fields: frontmatter___dateRated, order: DESC }\n      filter: { frontmatter: { rating7: { ne: null } } }\n    ) {\n      edges {\n        node {\n          ...BookCardFields\n        }\n      }\n    }\n  }\n`\n\nexport default BookListPage\n"],"sourceRoot":""}