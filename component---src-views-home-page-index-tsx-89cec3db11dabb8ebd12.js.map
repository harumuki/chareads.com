{"version":3,"sources":["webpack:///./src/components/cards/BookCard/index.tsx","webpack:///./src/routes/index.ts","webpack:///./src/routes/paths.ts","webpack:///./src/views/HomePage/index.tsx","webpack:///./node_modules/core-js/modules/es6.string.big.js"],"names":["StyledBookCard","styled","Link","COLOR","BACKGROUND_CARD","BORDER_RADIUS","S","StyledImg","Img","background","StyledStarRating","div","BookCard","book","big","to","slug","style","image","colors","lightMuted","color","darkVibrant","vibrant","title","author","key","childImageSharp","fluid","src","muted","of7","rating7","PAGES","404","PATH","VIEW","HOME","VIDEO","VIDEOS","BOOK","BOOKS","PATHS","Object","entries","forEach","PAGE","query","HomePage","data","bookData","videoData","books","normalizeArray","videos","Layout","Wrapper","H","as","size","decorative","Grid","length","map","GridItem","id","span","spanFromM","video","VideoCard","createHTML","this"],"mappings":"wwBAaA,IAAMA,EAAiBC,YAAOC,IAAPD,CAAH,IAMJE,IAAMC,gBACHC,IAAcC,GAO3BC,EAAYN,YAAOO,IAAPP,CAAH,KACC,qBAAGQ,cAIbC,EAAmBT,IAAOU,IAAV,KAuCPC,IA1BmB,SAAC,GAAkB,IAAhBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IACzC,OACE,kBAACd,EAAD,CACEe,GAAIF,EAAKG,KACTF,IAAKA,EACLG,MACE,CACER,WAAYK,GAAOD,EAAKK,MAAMC,OAAOC,WACrCC,MAAOR,EAAKK,MAAMC,OAAOG,YACzB,kBAAmBT,EAAKK,MAAMC,OAAOI,SAGzCC,MAAUX,EAAKW,MAAV,OAAsBX,EAAKY,QAEhC,kBAAClB,EAAD,CACEmB,IAAKb,EAAKK,MAAMS,gBAAgBC,MAAMC,IACtCD,MAAOf,EAAKK,MAAMS,gBAAgBC,MAClCnB,WAAYI,EAAKK,MAAMC,OAAOW,QAEhC,kBAACpB,EAAD,KACE,kBAAC,IAAD,CAAYqB,IAAKlB,EAAKmB,c,0FC/BfC,G,wCA3BU,CACvBC,IAAK,CACHC,KAAM,OACNC,KAAM,gBAERC,KAAM,CACJF,KAAM,IACNC,KAAM,YAERE,MAAO,CACLH,KAAM,SACNC,KAAM,aAERG,OAAQ,CACNJ,KAAM,UACNC,KAAM,iBAERI,KAAM,CACJL,KAAM,QACNC,KAAM,YAERK,MAAO,CACLN,KAAM,SACNC,KAAM,kBCxBJM,EAAmB,GAEzBC,OAAOC,QAAQX,GAAOY,SAAQ,YAAsB,IAApBC,EAAoB,KAAZX,EAAY,KAAZA,KACtCO,EAAMI,GAAQX,KAGDO,Q,oFCZf,sCA8BA,IAqCaK,EAAQ,YA0BNC,UA/DmB,SAAC,GAAsC,QAApCC,KAAQC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,UAC/CC,EAAQC,YAAeH,GACvBI,EAASD,YAAeF,GAE9B,OACE,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAGC,GAAG,KAAKC,KAAK,IAAIC,YAAU,GAC5B,kBAAC,IAAD,CAAM7C,GAAI2B,EAAMD,OAAhB,WAGJ,kBAACoB,EAAA,EAAD,CAAMH,GAAG,MACNN,EAAMU,QACLV,EAAMW,KAAI,SAAClD,GAAD,OACR,kBAACmD,EAAA,EAAD,CAAUN,GAAG,KAAKhC,IAAKb,EAAKoD,GAAIC,KAAM,EAAGC,UAAW,GAClD,kBAACvD,EAAA,EAAD,CAAUC,KAAMA,SAKxB,kBAAC2C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAGC,GAAG,KAAKC,KAAK,IAAIC,YAAU,GAC5B,kBAAC,IAAD,CAAM7C,GAAI2B,EAAMH,QAAhB,YAGJ,kBAACsB,EAAA,EAAD,CAAMH,GAAG,MACNJ,EAAOQ,QACNR,EAAOS,KAAI,SAACK,GAAD,OACT,kBAACJ,EAAA,EAAD,CAAUN,GAAG,KAAKhC,IAAK0C,EAAMH,GAAIC,KAAM,EAAGC,UAAW,GACnD,kBAACE,EAAA,EAAD,CAAWD,MAAOA,Y,kCCzDhC,EAAQ,OAAR,CAA0B,OAAO,SAAUE,GACzC,OAAO,WACL,OAAOA,EAAWC,KAAM,MAAO,GAAI","file":"component---src-views-home-page-index-tsx-89cec3db11dabb8ebd12.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport { BookCardType } from 'types/book/card'\nimport StarRating from 'components/StarRating'\nimport { COLOR, BORDER_RADIUS } from 'styles/tokens'\n\ninterface BookCardProps {\n  big: boolean\n}\n\nconst StyledBookCard = styled(Link)<BookCardProps>`\n  display: block;\n  margin: 0;\n  height: 100%;\n  padding: 10% 20% calc(10% + 1em);\n  position: relative;\n  background: ${COLOR.BACKGROUND_CARD};\n  border-radius: ${BORDER_RADIUS.S};\n`\n\ninterface StyledImgProps {\n  background: string\n}\n\nconst StyledImg = styled(Img)<StyledImgProps>`\n  background: ${({ background }): string => background};\n  box-shadow: 0 0.2em 0.5em rgba(0, 0, 0, 0.1), 0 0 0.3em rgba(0, 0, 0, 0.05);\n`\n\nconst StyledStarRating = styled.div`\n  position: absolute;\n  left: 0;\n  bottom: 0.5em;\n  width: 100%;\n  text-align: center;\n`\n\ninterface Props {\n  book: BookCardType\n  big?: boolean\n}\n\nconst BookCard: React.FC<Props> = ({ book, big }) => {\n  return (\n    <StyledBookCard\n      to={book.slug}\n      big={big}\n      style={\n        {\n          background: big && book.image.colors.lightMuted,\n          color: book.image.colors.darkVibrant,\n          '--primary-color': book.image.colors.vibrant,\n        } as object\n      }\n      title={`${book.title} by ${book.author}`}\n    >\n      <StyledImg\n        key={book.image.childImageSharp.fluid.src}\n        fluid={book.image.childImageSharp.fluid}\n        background={book.image.colors.muted}\n      />\n      <StyledStarRating>\n        <StarRating of7={book.rating7} />\n      </StyledStarRating>\n    </StyledBookCard>\n  )\n}\n\nexport default BookCard\n","type PagesType = {\n  [key: string]: {\n    PATH: string\n    VIEW: string\n  }\n}\n\nconst PAGES: PagesType = {\n  404: {\n    PATH: '/404',\n    VIEW: 'NotFoundPage',\n  },\n  HOME: {\n    PATH: '/',\n    VIEW: 'HomePage',\n  },\n  VIDEO: {\n    PATH: '/video',\n    VIEW: 'VideoPage',\n  },\n  VIDEOS: {\n    PATH: '/videos',\n    VIEW: 'VideoListPage',\n  },\n  BOOK: {\n    PATH: '/book',\n    VIEW: 'BookPage',\n  },\n  BOOKS: {\n    PATH: '/books',\n    VIEW: 'BookListPage',\n  },\n}\n\nexport default PAGES\n","import PAGES from '.'\n\ntype PathsType = {\n  [key: string]: string\n}\n\nconst PATHS: PathsType = {}\n\nObject.entries(PAGES).forEach(([PAGE, { PATH }]) => {\n  PATHS[PAGE] = PATH\n})\n\nexport default PATHS\n","import React from 'react'\nimport { graphql, Link } from 'gatsby'\n\nimport { normalizeArray } from 'utils/graphql/normalize'\nimport PATHS from 'routes/paths'\nimport Layout from 'Layout'\nimport { RawBookCard, BookCardType } from 'types/book/card'\nimport { RawVideoCard, VideoCardType } from 'types/video/card'\nimport H from 'components/H'\nimport Wrapper from 'components/Wrapper'\nimport Grid from 'components/Grid'\nimport GridItem from 'components/Grid/GridItem'\nimport BookCard from 'components/cards/BookCard'\nimport VideoCard from 'components/cards/VideoCard'\n\ninterface Props {\n  data: {\n    bookData: {\n      edges: {\n        node: RawBookCard\n      }[]\n    }\n    videoData: {\n      edges: {\n        node: RawVideoCard\n      }[]\n    }\n  }\n}\n\nconst HomePage: React.FC<Props> = ({ data: { bookData, videoData } }) => {\n  const books = normalizeArray(bookData) as BookCardType[]\n  const videos = normalizeArray(videoData) as VideoCardType[]\n\n  return (\n    <Layout>\n      <Wrapper>\n        <H as=\"h2\" size=\"L\" decorative>\n          <Link to={PATHS.BOOKS}>Books</Link>\n        </H>\n      </Wrapper>\n      <Grid as=\"ol\">\n        {books.length &&\n          books.map((book) => (\n            <GridItem as=\"li\" key={book.id} span={1} spanFromM={3}>\n              <BookCard book={book} />\n            </GridItem>\n          ))}\n      </Grid>\n\n      <Wrapper>\n        <H as=\"h2\" size=\"L\" decorative>\n          <Link to={PATHS.VIDEOS}>Videos</Link>\n        </H>\n      </Wrapper>\n      <Grid as=\"ol\">\n        {videos.length &&\n          videos.map((video) => (\n            <GridItem as=\"li\" key={video.id} span={1} spanFromM={3}>\n              <VideoCard video={video} />\n            </GridItem>\n          ))}\n      </Grid>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query HomePage {\n    bookData: allMarkdownRemark(\n      sort: { fields: frontmatter___dateRated, order: DESC }\n      filter: { frontmatter: { rating7: { ne: null } } }\n      limit: 8\n    ) {\n      edges {\n        node {\n          ...BookCardFields\n        }\n      }\n    }\n    videoData: allVideos(\n      sort: { fields: datePublished, order: DESC }\n      limit: 8\n    ) {\n      edges {\n        node {\n          ...VideoCardFields\n        }\n      }\n    }\n  }\n`\n\nexport default HomePage\n","'use strict';\n// B.2.3.3 String.prototype.big()\nrequire('./_string-html')('big', function (createHTML) {\n  return function big() {\n    return createHTML(this, 'big', '', '');\n  };\n});\n"],"sourceRoot":""}