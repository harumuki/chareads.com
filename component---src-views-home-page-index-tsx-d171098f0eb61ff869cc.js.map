{"version":3,"sources":["webpack:///./src/components/cards/BookCard/index.tsx","webpack:///./src/routes/index.ts","webpack:///./src/routes/paths.ts","webpack:///./src/views/HomePage/LinkCard.tsx","webpack:///./src/views/HomePage/index.tsx","webpack:///./node_modules/core-js/modules/es6.string.big.js"],"names":["StyledBookCard","styled","Link","hasVideo","COLOR","BACKGROUND_DARK","BORDER_RADIUS","S","StyledImg","Img","background","StyledStarRating","div","StyledVideoLink","FONT","SIZE","XS","WEIGHT","BOLD","BookCard","book","big","to","slug","video","style","image","colors","lightMuted","color","darkVibrant","vibrant","title","author","key","childImageSharp","fluid","src","muted","of7","rating7","fields","PAGES","404","PATH","VIEW","HOME","VIDEO","VIDEOS","BOOK","BOOKS","PATHS","Object","entries","forEach","PAGE","StyledLinkCard","BACKGROUND_LIGHT","FAMILY","DECORATIVE","LinkCard","children","StyledBookGrid","Grid","screen","m","query","HomePage","bookData","data","location","books","normalizeArray","Layout","TextIntro","H","as","size","decorative","Wrapper","length","map","GridItem","id","span","spanFromM","spanFromL","createHTML","this"],"mappings":"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","file":"component---src-views-home-page-index-tsx-d171098f0eb61ff869cc.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport { BookCardType } from 'types/book/card'\nimport StarRating from 'components/StarRating'\nimport { FONT, COLOR, BORDER_RADIUS } from 'styles/tokens'\n\ninterface BookCardProps {\n  hasVideo: boolean\n}\n\nconst StyledBookCard = styled(Link)<BookCardProps>`\n  display: block;\n  margin: 0;\n  height: 100%;\n  padding: 10% 20%\n    calc(10% + ${({ hasVideo }): number => (hasVideo ? 2.5 : 1)}em);\n  position: relative;\n  background: ${COLOR.BACKGROUND_DARK};\n  border-radius: ${BORDER_RADIUS.S};\n`\n\ninterface StyledImgProps {\n  background: string\n}\n\nconst StyledImg = styled(Img)<StyledImgProps>`\n  background: ${({ background }): string => background};\n  box-shadow: 0 0.2em 0.5em rgba(0, 0, 0, 0.1), 0 0 0.3em rgba(0, 0, 0, 0.05);\n  top: 50%;\n  transform: translate(0, -50%);\n`\n\nconst StyledStarRating = styled.div`\n  position: absolute;\n  left: 0;\n  bottom: 0.75em;\n  width: 100%;\n  text-align: center;\n  line-height: 1;\n`\n\nconst StyledVideoLink = styled(Link)`\n  font-size: ${FONT.SIZE.XS};\n  font-weight: ${FONT.WEIGHT.BOLD};\n  padding: 0.25em 0.5em;\n`\n\ninterface Props {\n  book: BookCardType\n  big?: boolean\n}\n\nconst BookCard: React.FC<Props> = ({ book, big }) => {\n  return (\n    <StyledBookCard\n      to={book.slug}\n      hasVideo={!!book.video}\n      style={\n        {\n          background: big && book.image.colors.lightMuted,\n          color: book.image.colors.darkVibrant,\n          '--primary-color': book.image.colors.vibrant,\n        } as object\n      }\n      title={`${book.title} by ${book.author}`}\n    >\n      <StyledImg\n        key={book.image.childImageSharp.fluid.src}\n        fluid={book.image.childImageSharp.fluid}\n        background={book.image.colors.muted}\n      />\n      <StyledStarRating>\n        <StarRating of7={book.rating7} />\n        {book.video && (\n          <StyledVideoLink to={book.video.fields.slug}>\n            Video review &rarr;\n          </StyledVideoLink>\n        )}\n      </StyledStarRating>\n    </StyledBookCard>\n  )\n}\n\nexport default BookCard\n","type PagesType = {\n  [key: string]: {\n    PATH: string\n    VIEW: string\n  }\n}\n\nconst PAGES: PagesType = {\n  404: {\n    PATH: '/404',\n    VIEW: 'NotFoundPage',\n  },\n  HOME: {\n    PATH: '/',\n    VIEW: 'HomePage',\n  },\n  VIDEO: {\n    PATH: '/video',\n    VIEW: 'VideoPage',\n  },\n  VIDEOS: {\n    PATH: '/videos',\n    VIEW: 'VideoListPage',\n  },\n  BOOK: {\n    PATH: '/book',\n    VIEW: 'BookPage',\n  },\n  BOOKS: {\n    PATH: '/books',\n    VIEW: 'BookListPage',\n  },\n}\n\nexport default PAGES\n","import PAGES from '.'\n\ntype PathsType = {\n  [key: string]: string\n}\n\nconst PATHS: PathsType = {}\n\nObject.entries(PAGES).forEach(([PAGE, { PATH }]) => {\n  PATHS[PAGE] = PATH\n})\n\nexport default PATHS\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\n\nimport { FONT, COLOR, BORDER_RADIUS } from 'styles/tokens'\n\nconst StyledLinkCard = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0;\n  padding: 1rem;\n  height: 100%;\n  background: ${COLOR.BACKGROUND_LIGHT};\n  border-radius: ${BORDER_RADIUS.S};\n  font-family: ${FONT.FAMILY.DECORATIVE};\n  font-size: 2.5em;\n  line-height: 0.85;\n`\n\ninterface Props {\n  to: string\n  children: React.ReactNode\n}\n\nconst LinkCard: React.FC<Props> = ({ to, children }) => {\n  return (\n    <StyledLinkCard to={to}>\n      {children}\n      <br />\n      &rarr;\n    </StyledLinkCard>\n  )\n}\n\nexport default LinkCard\n","import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport styled from 'styled-components'\n\nimport { PageProps } from 'types/page'\nimport { normalizeArray } from 'utils/graphql/normalize'\nimport PATHS from 'routes/paths'\nimport Layout from 'Layout'\nimport { RawBookCard, BookCardType } from 'types/book/card'\nimport H from 'components/H'\nimport Wrapper from 'components/Wrapper'\nimport TextIntro from 'components/Wrapper/TextIntro'\nimport Grid from 'components/Grid'\nimport GridItem from 'components/Grid/GridItem'\nimport BookCard from 'components/cards/BookCard'\nimport { screen } from 'styles/responsive'\n\nimport LinkCard from './LinkCard'\n\nconst StyledBookGrid = styled(Grid)`\n  ${screen.m`\n    > *:nth-child(14) {\n      display: none;\n    }\n  `}\n`\n\ninterface Props extends PageProps {\n  data: {\n    bookData: {\n      edges: {\n        node: RawBookCard\n      }[]\n    }\n  }\n}\n\nconst HomePage: React.FC<Props> = ({ data: { bookData }, location }) => {\n  const books = normalizeArray(bookData) as BookCardType[]\n\n  return (\n    <Layout location={location}>\n      <TextIntro>\n        <H as=\"h1\" size=\"XXL\" decorative>\n          <Link to={PATHS.HOME}>Chareads</Link>\n        </H>\n        <p>\n          Hello, I&rsquo;m Charlotte and I love to read anything and everything.\n          Chareads is where I record and review every book I read. Have a poke\n          around and find your next favourite.\n        </p>\n      </TextIntro>\n\n      <Wrapper>\n        <H as=\"h2\" size=\"L\" decorative>\n          <Link to={PATHS.BOOKS}>Recent reads</Link>\n        </H>\n      </Wrapper>\n      <StyledBookGrid as=\"ol\">\n        {books.length &&\n          books.map((book) => (\n            <GridItem\n              as=\"li\"\n              key={book.id}\n              span={1}\n              spanFromM={4}\n              spanFromL={3}\n            >\n              <BookCard book={book} big={book.rating7 >= 6} />\n            </GridItem>\n          ))}\n        <GridItem as=\"li\" span={1} spanFromM={4} spanFromL={3}>\n          <LinkCard to={PATHS.BOOKS}>More book reviews</LinkCard>\n        </GridItem>\n        <GridItem as=\"li\" span={1} spanFromM={4} spanFromL={3}>\n          <LinkCard to={PATHS.VIDEOS}>Videos</LinkCard>\n        </GridItem>\n      </StyledBookGrid>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query HomePage {\n    bookData: allMarkdownRemark(\n      sort: { fields: frontmatter___dateRated, order: DESC }\n      filter: { frontmatter: { rating7: { ne: null } } }\n      limit: 14\n    ) {\n      edges {\n        node {\n          ...BookCardFields\n        }\n      }\n    }\n  }\n`\n\nexport default HomePage\n","'use strict';\n// B.2.3.3 String.prototype.big()\nrequire('./_string-html')('big', function (createHTML) {\n  return function big() {\n    return createHTML(this, 'big', '', '');\n  };\n});\n"],"sourceRoot":""}