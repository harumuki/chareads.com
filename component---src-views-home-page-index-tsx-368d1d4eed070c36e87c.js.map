{"version":3,"sources":["webpack:///./src/views/HomePage/SectionLink.tsx","webpack:///./src/views/HomePage/index.tsx"],"names":["StyledLinkCard","styled","Link","FONT","WEIGHT","BOLD","SectionLink","to","children","ArrowIcon","StyledIntroGrid","Grid","screenMin","m","StyledBookGrid","screen","StyledLinkWrapper","Wrapper","query","HomePage","bookData","data","location","books","normalizeArray","Layout","navOpenOnDesktop","GridItem","span","spanFromM","spanFromL","spanFromXL","H","as","size","decorative","PATHS","HOME","length","map","book","key","id","BookCard","featured","rating7","BOOKS","VIDEOS"],"mappings":"yZAOA,IAAMA,EAAiBC,YAAOC,IAAPD,CAAH,IACHE,IAAKC,OAAOC,MAmBdC,EAXsB,SAAC,GAAqB,IAAnBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAC1C,OACE,6BACE,kBAACR,EAAD,CAAgBO,GAAIA,GACjBC,EACD,kBAACC,EAAA,EAAD,S,4kBCHR,IAAMC,EAAkBT,YAAOU,IAAPV,CAAH,IAKjBW,IAAUC,EALO,MAWfC,EAAiBb,YAAOU,IAAPV,CAAH,IAChBc,IAAOF,EADS,MAQdG,EAAoBf,YAAOgB,IAAPhB,CAAH,KAyDViB,EAAQ,YAgBNC,UAzDmB,SAAC,GAAqC,IAA3BC,EAA2B,EAAnCC,KAAQD,SAAYE,EAAe,EAAfA,SACjDC,EAAQC,YAAeJ,GAE7B,OACE,kBAACK,EAAA,EAAD,CAAQH,SAAUA,EAAUI,kBAAgB,GAC1C,kBAAChB,EAAD,KACE,kBAACiB,EAAA,EAAD,CAAUC,KAAM,EAAGC,UAAW,GAAIC,UAAW,EAAGC,WAAY,GAC1D,kBAACC,EAAA,EAAD,CAAGC,GAAG,KAAKC,KAAK,MAAMC,YAAU,GAC9B,kBAAC,IAAD,CAAM5B,GAAI6B,IAAMC,MAAhB,aAEF,2MAQJ,kBAACvB,EAAD,CAAgBmB,GAAG,MAChBV,EAAMe,QACLf,EAAMgB,KAAI,SAACC,GAAD,OACR,kBAACb,EAAA,EAAD,CACEM,GAAG,KACHQ,IAAKD,EAAKE,GACVd,KAAM,EACNC,UAAW,EACXC,UAAW,GAEX,kBAACa,EAAA,EAAD,CAAUH,KAAMA,EAAMI,SAAUJ,EAAKK,SAAW,SAKxD,kBAAC7B,EAAD,KACE,kBAAC,EAAD,CAAaT,GAAI6B,IAAMU,OAAvB,0BACA,kBAAC,EAAD,CAAavC,GAAI6B,IAAMW,QAAvB","file":"component---src-views-home-page-index-tsx-368d1d4eed070c36e87c.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\n\nimport { FONT } from 'styles/tokens'\nimport ArrowIcon from 'components/icons/ArrowIcon'\n\nconst StyledLinkCard = styled(Link)`\n  font-weight: ${FONT.WEIGHT.BOLD};\n`\n\ninterface Props {\n  to: string\n  children: React.ReactNode\n}\n\nconst SectionLink: React.FC<Props> = ({ to, children }) => {\n  return (\n    <div>\n      <StyledLinkCard to={to}>\n        {children}\n        <ArrowIcon />\n      </StyledLinkCard>\n    </div>\n  )\n}\n\nexport default SectionLink\n","import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport styled from 'styled-components'\n\nimport { PageProps } from 'types/page'\nimport { normalizeArray } from 'utils/graphql/normalize'\nimport PATHS from 'routes/paths'\nimport Layout from 'Layout'\nimport { BookCardType } from 'types/book'\nimport H from 'components/H'\nimport Grid from 'components/Grid'\nimport GridItem from 'components/Grid/GridItem'\nimport BookCard from 'components/cards/BookCard'\nimport Wrapper from 'components/Wrapper'\nimport { screen, screenMin } from 'styles/responsive'\n\nimport SectionLink from './SectionLink'\n\nconst StyledIntroGrid = styled(Grid)`\n  && {\n    margin-bottom: 1em;\n  }\n\n  ${screenMin.m`\n    margin-top: 2em;\n    margin-bottom: 1em;\n  `}\n`\n\nconst StyledBookGrid = styled(Grid)`\n  ${screen.m`\n    > *:nth-child(14) {\n      display: none;\n    }\n  `}\n`\n\nconst StyledLinkWrapper = styled(Wrapper)`\n  && {\n    margin-top: 2em;\n  }\n`\n\ninterface Props extends PageProps {\n  data: {\n    bookData: {\n      edges: {\n        node: BookCardType\n      }[]\n    }\n  }\n}\n\nconst HomePage: React.FC<Props> = ({ data: { bookData }, location }) => {\n  const books = normalizeArray(bookData) as BookCardType[]\n\n  return (\n    <Layout location={location} navOpenOnDesktop>\n      <StyledIntroGrid>\n        <GridItem span={2} spanFromM={12} spanFromL={9} spanFromXL={8}>\n          <H as=\"h1\" size=\"XXL\" decorative>\n            <Link to={PATHS.HOME}>Chareads</Link>\n          </H>\n          <p>\n            Hello, I&rsquo;m Charlotte and I love to read anything and\n            everything. Chareads is where I record and review every book I read.\n            Have a poke around and find your next favourite.\n          </p>\n        </GridItem>\n      </StyledIntroGrid>\n\n      <StyledBookGrid as=\"ol\">\n        {books.length &&\n          books.map((book) => (\n            <GridItem\n              as=\"li\"\n              key={book.id}\n              span={1}\n              spanFromM={4}\n              spanFromL={3}\n            >\n              <BookCard book={book} featured={book.rating7 >= 6} />\n            </GridItem>\n          ))}\n      </StyledBookGrid>\n\n      <StyledLinkWrapper>\n        <SectionLink to={PATHS.BOOKS}>Find more book reviews</SectionLink>\n        <SectionLink to={PATHS.VIDEOS}>See all my bookish videos</SectionLink>\n      </StyledLinkWrapper>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query HomePage {\n    bookData: allBook(\n      sort: { fields: dateRated, order: DESC }\n      filter: { rating7: { ne: null } }\n      limit: 12\n    ) {\n      edges {\n        node {\n          ...BookCardFields\n        }\n      }\n    }\n  }\n`\n\nexport default HomePage\n"],"sourceRoot":""}