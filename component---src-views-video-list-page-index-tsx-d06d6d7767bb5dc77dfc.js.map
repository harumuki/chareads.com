{"version":3,"sources":["webpack:///./src/views/VideoListPage/index.tsx"],"names":["query","VideoListPage","videoData","data","videos","normalizeArray","length","map","video","key","id","to","slug","title"],"mappings":"6FAAA,0GAmCaA,EAAQ,UAYNC,UA9BwB,SAAC,GAA4B,IAAlBC,EAAkB,EAA1BC,KAAQD,UAC1CE,EAASC,YAAeH,GAE9B,OACE,kBAAC,IAAD,KACGE,EAAOE,QACN,4BACGF,EAAOG,KAAI,SAACC,GAAD,OACV,wBAAIC,IAAKD,EAAME,IACb,kBAAC,IAAD,CAAMC,GAAIH,EAAMI,MAAOJ,EAAMK","file":"component---src-views-video-list-page-index-tsx-d06d6d7767bb5dc77dfc.js","sourcesContent":["import React from 'react'\nimport { graphql, Link } from 'gatsby'\n\nimport { normalizeArray } from 'utils/graphql/normalize'\nimport Layout from 'Layout'\nimport { RawVideoCard, VideoCard } from 'types/video/card'\n\ninterface Props {\n  data: {\n    videoData: {\n      edges: {\n        node: RawVideoCard\n      }[]\n    }\n  }\n}\n\nconst VideoListPage: React.FC<Props> = ({ data: { videoData } }) => {\n  const videos = normalizeArray(videoData) as VideoCard[]\n\n  return (\n    <Layout>\n      {videos.length && (\n        <ol>\n          {videos.map((video) => (\n            <li key={video.id}>\n              <Link to={video.slug}>{video.title}</Link>\n            </li>\n          ))}\n        </ol>\n      )}\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query VideoListPage {\n    videoData: allVideos(sort: { fields: datePublished }) {\n      edges {\n        node {\n          ...VideoCardFields\n        }\n      }\n    }\n  }\n`\n\nexport default VideoListPage\n"],"sourceRoot":""}