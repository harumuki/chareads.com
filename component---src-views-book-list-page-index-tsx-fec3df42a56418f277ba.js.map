{"version":3,"sources":["webpack:///./src/views/BookListPage/index.tsx"],"names":["query","BookListPage","bookData","data","books","normalizeArray","length","map","book","key","id","to","slug","title"],"mappings":"2FAAA,0GAmCaA,EAAQ,aAYNC,UA9BuB,SAAC,GAA2B,IAAjBC,EAAiB,EAAzBC,KAAQD,SACzCE,EAAQC,YAAeH,GAE7B,OACE,kBAAC,IAAD,KACGE,EAAME,QACL,4BACGF,EAAMG,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKD,EAAKE,IACZ,kBAAC,IAAD,CAAMC,GAAIH,EAAKI,MAAOJ,EAAKK","file":"component---src-views-book-list-page-index-tsx-fec3df42a56418f277ba.js","sourcesContent":["import React from 'react'\nimport { graphql, Link } from 'gatsby'\n\nimport { normalizeArray } from 'utils/graphql/normalize'\nimport Layout from 'Layout'\nimport { RawBookCard, BookCard } from 'types/book/card'\n\ninterface Props {\n  data: {\n    bookData: {\n      edges: {\n        node: RawBookCard\n      }[]\n    }\n  }\n}\n\nconst BookListPage: React.FC<Props> = ({ data: { bookData } }) => {\n  const books = normalizeArray(bookData) as BookCard[]\n\n  return (\n    <Layout>\n      {books.length && (\n        <ol>\n          {books.map((book) => (\n            <li key={book.id}>\n              <Link to={book.slug}>{book.title}</Link>\n            </li>\n          ))}\n        </ol>\n      )}\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query BookListPage {\n    bookData: allMarkdownRemark(sort: { fields: frontmatter___dateReviewed }) {\n      edges {\n        node {\n          ...BookCardFields\n        }\n      }\n    }\n  }\n`\n\nexport default BookListPage\n"],"sourceRoot":""}