{"version":3,"sources":["webpack:///./src/views/VideoListPage/index.tsx","webpack:///./src/utils/hooks/useScrollPosition.ts","webpack:///./src/components/InfiniteScroll/index.tsx"],"names":["query","VideoListPage","videoData","data","location","videos","normalizeArray","as","items","renderItem","video","key","id","span","spanFromM","featured","useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","isBrowser","useScrollPosition","effect","wait","deps","element","throttleTimeout","callback","current","document","body","getBoundingClientRect","bottom","innerHeight","getScrollPosition","handleScroll","setTimeout","addEventListener","removeEventListener","InfiniteScroll","anchorRef","createRef","useState","itemsToShow","setItemsToShow","pos","length","slice","map","ref"],"mappings":"6FAAA,8IAyCaA,EAAQ,YAYNC,UA/BwB,SAAC,GAAsC,IAA5BC,EAA4B,EAApCC,KAAQD,UAAaE,EAAe,EAAfA,SACvDC,EAASC,YAAeJ,GAE9B,OACE,kBAAC,IAAD,CAAQE,SAAUA,GAChB,kBAAC,IAAD,CAAMG,GAAG,MACP,kBAAC,IAAD,CACEC,MAAOH,EACPI,WAAY,SAACC,GAAD,OACV,kBAAC,IAAD,CAAUH,GAAG,KAAKI,IAAKD,EAAME,GAAIC,KAAM,EAAGC,UAAW,GACnD,kBAAC,IAAD,CAAWJ,MAAOA,EAAOK,SAAUL,EAAMK,mB,2DC9BjDC,EACc,oBAAXC,OAAyBC,kBAAkBC,YAC9CC,EAAY,oBAAOH,OA6CVI,EAlCW,SACxBC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAkB,KAEhBC,EAAW,WACfL,EAlBsB,SACxBG,GAEA,OAAKL,GAEUK,EAAQG,SAAWC,SAASC,MAC7BC,wBAAwBC,OAASf,OAAOgB,YAH/B,EAedC,CAAkBT,IACzBC,EAAkB,MAGpBV,GAA0B,WACxB,GAAKI,EAAL,CAIA,IAAMe,EAAe,WACfZ,EACsB,OAApBG,IACFA,EAAkBU,WAAWT,EAAUJ,IAGzCI,KAMJ,OAFAV,OAAOoB,iBAAiB,SAAUF,GAE3B,kBAAYlB,OAAOqB,oBAAoB,SAAUH,OACvDX,GAAQ,KCtCPJ,EAAY,oBAAOH,OA6BVsB,IAtByB,SAAC,GAA0B,IAAxB/B,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC1C+B,EAAYC,sBAD+C,EAE3BC,mBAZlB,IAYbC,EAF0D,KAE7CC,EAF6C,KAcjE,OAVAvB,GACE,SAACwB,GACKA,EAAM,KAAOF,EAAcnC,EAAMsC,QACnCF,EAAeD,EAhBL,KAFI,IAqBlB,CAACA,GACDH,GAIA,oCACGhC,EAAMuC,MAAM,EAAG3B,EAAYuB,EAAcnC,EAAMsC,QAAQE,IAAIvC,GAC5D,0BAAMwC,IAAKT","file":"component---src-views-video-list-page-index-tsx-4db463b06d5b0c3c23b7.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport { PageProps } from 'types/page'\nimport { normalizeArray } from 'utils/graphql/normalize'\nimport Layout from 'Layout'\nimport { RawVideoCard, VideoCardType } from 'types/video/card'\nimport Grid from 'components/Grid'\nimport GridItem from 'components/Grid/GridItem'\nimport VideoCard from 'components/cards/VideoCard'\nimport InfiniteScroll from 'components/InfiniteScroll'\n\ninterface Props extends PageProps {\n  data: {\n    videoData: {\n      edges: {\n        node: RawVideoCard\n      }[]\n    }\n  }\n}\n\nconst VideoListPage: React.FC<Props> = ({ data: { videoData }, location }) => {\n  const videos = normalizeArray(videoData) as VideoCardType[]\n\n  return (\n    <Layout location={location}>\n      <Grid as=\"ol\">\n        <InfiniteScroll\n          items={videos}\n          renderItem={(video: VideoCardType): React.ReactNode => (\n            <GridItem as=\"li\" key={video.id} span={1} spanFromM={3}>\n              <VideoCard video={video} featured={video.featured} />\n            </GridItem>\n          )}\n        />\n      </Grid>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query VideoListPage {\n    videoData: allVideos(sort: { fields: datePublished, order: DESC }) {\n      edges {\n        node {\n          ...VideoCardFields\n        }\n      }\n    }\n  }\n`\n\nexport default VideoListPage\n","import { useEffect, useLayoutEffect } from 'react'\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect\nconst isBrowser = typeof window !== `undefined`\n\nconst getScrollPosition = (\n  element: React.RefObject<React.ReactNode>\n): number => {\n  if (!isBrowser) return 0\n\n  const target = element.current || document.body\n  return target.getBoundingClientRect().bottom - window.innerHeight\n}\n\nconst useScrollPosition = (\n  effect: (pos: number) => void,\n  wait: number,\n  deps: any[], // eslint-disable-line\n  element?: React.RefObject<React.ReactNode>\n): void => {\n  let throttleTimeout = null\n\n  const callback = (): void => {\n    effect(getScrollPosition(element))\n    throttleTimeout = null\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    if (!isBrowser) {\n      return\n    }\n\n    const handleScroll = (): void => {\n      if (wait) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(callback, wait)\n        }\n      } else {\n        callback()\n      }\n    }\n\n    window.addEventListener('scroll', handleScroll)\n\n    return (): void => window.removeEventListener('scroll', handleScroll)\n  }, deps || [])\n}\n\nexport default useScrollPosition\n","import React, { useState, createRef } from 'react'\n\nimport useScrollPosition from 'utils/hooks/useScrollPosition'\n\nconst SCROLL_BUFFER = 300\nconst INITIAL_COUNT = 16\nconst INCREMENT = 4\n\nconst isBrowser = typeof window !== `undefined`\n\ninterface Props {\n  items: object[]\n  renderItem: (item: object) => React.ReactNode\n}\n\nconst InfiniteScroll: React.FC<Props> = ({ items, renderItem }) => {\n  const anchorRef = createRef()\n  const [itemsToShow, setItemsToShow] = useState(INITIAL_COUNT)\n\n  useScrollPosition(\n    (pos) => {\n      if (pos < 400 && itemsToShow < items.length)\n        setItemsToShow(itemsToShow + INCREMENT)\n    },\n    SCROLL_BUFFER,\n    [itemsToShow],\n    anchorRef\n  )\n\n  return (\n    <>\n      {items.slice(0, isBrowser ? itemsToShow : items.length).map(renderItem)}\n      <span ref={anchorRef} />\n    </>\n  )\n}\n\nexport default InfiniteScroll\n"],"sourceRoot":""}