{"version":3,"sources":["webpack:///./src/components/Wrapper/TextIntro.tsx","webpack:///./src/views/HomePage/SectionLink.tsx","webpack:///./src/views/HomePage/index.tsx"],"names":["StyledIntro","styled","div","screenMin","l","toVW","getWidthOfColumns","xl","TextIntro","children","Wrapper","StyledLinkCard","Link","FONT","WEIGHT","BOLD","SectionLink","to","ArrowIcon","StyledBookGrid","Grid","screen","m","StyledLinkWrapper","query","HomePage","bookData","data","location","books","normalizeArray","Layout","H","as","size","decorative","PATHS","HOME","length","map","book","GridItem","key","id","span","spanFromM","spanFromL","BookCard","featured","rating7","BOOKS","VIDEOS"],"mappings":"wiBAOA,IAAMA,EAAcC,IAAOC,IAAV,IAGbC,IAAUC,EAHG,IAIAC,YAAKC,IAAkBF,EAAE,KAGtCD,IAAUI,GAPG,IAQAF,YAAKC,IAAkBC,GAAG,MAc5BC,EANoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACjC,kBAACC,EAAA,EAAD,KACE,kBAACV,EAAD,KAAcS,K,8LClBlB,IAAME,EAAiBV,YAAOW,IAAPX,CAAH,IACHY,IAAKC,OAAOC,MAmBdC,EAXsB,SAAC,GAAqB,IAAnBC,EAAmB,EAAnBA,GAAIR,EAAe,EAAfA,SAC1C,OACE,6BACE,kBAACE,EAAD,CAAgBM,GAAIA,GACjBR,EACD,kBAACS,EAAA,EAAD,S,kXCFR,IAAMC,EAAiBlB,YAAOmB,IAAPnB,CAAH,IAChBoB,IAAOC,EADS,MAQdC,EAAoBtB,YAAOS,IAAPT,CAAH,KAuDVuB,EAAQ,aAgBNC,UAvDmB,SAAC,GAAqC,IAA3BC,EAA2B,EAAnCC,KAAQD,SAAYE,EAAe,EAAfA,SACjDC,EAAQC,YAAeJ,GAE7B,OACE,kBAACK,EAAA,EAAD,CAAQH,SAAUA,GAChB,kBAAC,EAAD,KACE,kBAACI,EAAA,EAAD,CAAGC,GAAG,KAAKC,KAAK,MAAMC,YAAU,GAC9B,kBAAC,IAAD,CAAMlB,GAAImB,IAAMC,MAAhB,aAEF,0MAOF,kBAAClB,EAAD,CAAgBc,GAAG,MAChBJ,EAAMS,QACLT,EAAMU,KAAI,SAACC,GAAD,OACR,kBAACC,EAAA,EAAD,CACER,GAAG,KACHS,IAAKF,EAAKG,GACVC,KAAM,EACNC,UAAW,EACXC,UAAW,GAEX,kBAACC,EAAA,EAAD,CAAUP,KAAMA,EAAMQ,SAAUR,EAAKS,SAAW,SAKxD,kBAAC1B,EAAD,KACE,kBAAC,EAAD,CAAaN,GAAImB,IAAMc,OAAvB,0BACA,kBAAC,EAAD,CAAajC,GAAImB,IAAMe,QAAvB","file":"component---src-views-home-page-index-tsx-cbc039ca437ee56b8daf.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport Wrapper from 'components/Wrapper'\nimport { screenMin } from 'styles/responsive'\nimport { toVW, getWidthOfColumns } from 'styles/layout'\n\nconst StyledIntro = styled.div`\n  margin-bottom: 2em;\n\n  ${screenMin.l`\n    max-width: ${toVW(getWidthOfColumns.l(9))};\n  `}\n\n  ${screenMin.xl`\n    max-width: ${toVW(getWidthOfColumns.xl(8))};\n  `}\n`\n\ninterface Props {\n  children: React.ReactNode\n}\n\nconst TextIntro: React.FC<Props> = ({ children }) => (\n  <Wrapper>\n    <StyledIntro>{children}</StyledIntro>\n  </Wrapper>\n)\n\nexport default TextIntro\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\n\nimport { FONT } from 'styles/tokens'\nimport ArrowIcon from 'components/icons/ArrowIcon'\n\nconst StyledLinkCard = styled(Link)`\n  font-weight: ${FONT.WEIGHT.BOLD};\n`\n\ninterface Props {\n  to: string\n  children: React.ReactNode\n}\n\nconst SectionLink: React.FC<Props> = ({ to, children }) => {\n  return (\n    <div>\n      <StyledLinkCard to={to}>\n        {children}\n        <ArrowIcon />\n      </StyledLinkCard>\n    </div>\n  )\n}\n\nexport default SectionLink\n","import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport styled from 'styled-components'\n\nimport { PageProps } from 'types/page'\nimport { normalizeArray } from 'utils/graphql/normalize'\nimport PATHS from 'routes/paths'\nimport Layout from 'Layout'\nimport { RawBookCard, BookCardType } from 'types/book/card'\nimport H from 'components/H'\nimport TextIntro from 'components/Wrapper/TextIntro'\nimport Grid from 'components/Grid'\nimport GridItem from 'components/Grid/GridItem'\nimport BookCard from 'components/cards/BookCard'\nimport Wrapper from 'components/Wrapper'\nimport { screen } from 'styles/responsive'\n\nimport SectionLink from './SectionLink'\n\nconst StyledBookGrid = styled(Grid)`\n  ${screen.m`\n    > *:nth-child(14) {\n      display: none;\n    }\n  `}\n`\n\nconst StyledLinkWrapper = styled(Wrapper)`\n  && {\n    margin-top: 2em;\n  }\n`\n\ninterface Props extends PageProps {\n  data: {\n    bookData: {\n      edges: {\n        node: RawBookCard\n      }[]\n    }\n  }\n}\n\nconst HomePage: React.FC<Props> = ({ data: { bookData }, location }) => {\n  const books = normalizeArray(bookData) as BookCardType[]\n\n  return (\n    <Layout location={location}>\n      <TextIntro>\n        <H as=\"h1\" size=\"XXL\" decorative>\n          <Link to={PATHS.HOME}>Chareads</Link>\n        </H>\n        <p>\n          Hello, I&rsquo;m Charlotte and I love to read anything and everything.\n          Chareads is where I record and review every book I read. Have a poke\n          around and find your next favourite.\n        </p>\n      </TextIntro>\n\n      <StyledBookGrid as=\"ol\">\n        {books.length &&\n          books.map((book) => (\n            <GridItem\n              as=\"li\"\n              key={book.id}\n              span={1}\n              spanFromM={4}\n              spanFromL={3}\n            >\n              <BookCard book={book} featured={book.rating7 >= 6} />\n            </GridItem>\n          ))}\n      </StyledBookGrid>\n\n      <StyledLinkWrapper>\n        <SectionLink to={PATHS.BOOKS}>Find more book reviews</SectionLink>\n        <SectionLink to={PATHS.VIDEOS}>See all my bookish videos</SectionLink>\n      </StyledLinkWrapper>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query HomePage {\n    bookData: allMarkdownRemark(\n      sort: { fields: frontmatter___dateRated, order: DESC }\n      filter: { frontmatter: { rating7: { ne: null } } }\n      limit: 12\n    ) {\n      edges {\n        node {\n          ...BookCardFields\n        }\n      }\n    }\n  }\n`\n\nexport default HomePage\n"],"sourceRoot":""}